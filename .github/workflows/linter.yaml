---
name: Find Style and Format Violations

on:
  push: null
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  APPLY_FIXES: all
  APPLY_FIXES_EVENT: push
  APPLY_FIXES_MODE: commit
  content: "demo content"

jobs:
  mega-linter:
    name: Find Violations Using Mega Linter
    runs-on: ubuntu-latest

    outputs:
      read_log: ${{ needs.mega-linter.read-log.artifact_content }}

    permissions:
      contents: write
      packages: read
      issues: write
      pull-requests: write
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Mega-Linter
        id: ml
        uses: oxsecurity/megalinter/flavors/java@beta
        env:
          VALIDATE_ALL_CODEBASE: true # ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }} # Validates all source when push on master, else just the git diff with master. Override with true if you always want to lint all sources
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE: JAVA
          ENABLE_LINTERS: JAVA_CHECKSTYLE
          DISABLE_LINTERS: JAVA_PMD
          JAVA_CHECKSTYLE_CONFIG_FILE: sun_checks.xml
          APPLY_FIXES: JAVA_CHECKSTYLE
          APPLY_FIXES_EVENT: push
          APPLY_FIXES_MODE: commit

      - name: Archive production artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: Mega-Linter reports
          path: |
            megalinter-reports
            mega-linter.log

      - name: Download artifact
        if: success() || failure()
        uses: actions/download-artifact@v4
        with:
          name: Mega-Linter reports
          path: |
            megalinter-reports
            mega-linter.log

      - name: Read content from artifact
        id: read-log
        if: success() || failure()
        run: |
          ls megalinter-reports
          content=$(cat megalinter-reports/megalinter.log)
          echo "::set-output name=content::$content"
          paragraph=$(echo "$content" | tr '\n' ' ')
          echo "::set-output name=content::$paragraph"

      - name: Pass content as an output
        if: success() || failure()
        run: echo "artifact_content='${{ steps.read-log.outputs.content }}'" >> $GITHUB_ENV

      - name: Debug
        if: success() || failure()
        run: |
          cat megalinter-reports/megalinter.log
          echo "Content: ${{ steps.read-log.outputs.content }}"

      - name: Comment a pull_request
        if: success() || failure()
        uses: mb2dev/github-action-comment-pull-request@1.0.0
        with:
          message: |
            body: |
            ```
            ->${{ steps.read-log.outputs.content }}<-
            ```
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}