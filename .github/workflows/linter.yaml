---
name: Find Style and Format Violations

on:
  push: null
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  mega-linter:
    name: Find Violations Using Mega Linter
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: read
      issues: write
      pull-requests: write
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Mega-Linter
        id: ml
        uses: oxsecurity/megalinter/flavors/java@beta
        env:
          VALIDATE_ALL_CODEBASE: true # ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }} # Validates all source when push on master, else just the git diff with master. Override with true if you always want to lint all sources
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE: JAVA
          ENABLE_LINTERS: JAVA_CHECKSTYLE
          DISABLE_LINTERS: JAVA_PMD
          JAVA_CHECKSTYLE_CONFIG_FILE: sun_checks.xml
          APPLY_FIXES: all
          APPLY_FIXES_EVENT: all
          APPLY_FIXES_MODE: pull_request

      - name: Archive production artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Mega-Linter reports
          path: |
            megalinter-reports
            mega-linter.log

      - name: Set up Node.js
        if: success() || failure()
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        if: success() || failure()
        run: npm install

      - name: Download artifact
        if: success() || failure()
        uses: actions/download-artifact@v4
        with:
          name: Mega-Linter reports

      - name: Read content from artifact
        if: success() || failure()
        run: |
          content=$(cat megalinter-reports/mega-linter.log)
          echo "::set-output name=content::$content"

      - name: Comment on GitHub
        if: success() || failure()
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -d '{"body": "Artifact Content:\n\n'"${{ steps.comment_on_artifact.outputs.content }}"'"}'